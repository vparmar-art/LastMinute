"""
Django settings for main project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os

# Try to load environment variables from .env.kms file in project root, fallback to .env
try:
    from dotenv import load_dotenv
    BASE_DIR = Path(__file__).resolve().parent.parent
    env_kms_path = os.path.join(BASE_DIR, '..', '.env.kms')
    env_default_path = os.path.join(BASE_DIR, '..', '.env')
    if os.path.exists(env_kms_path):
        load_dotenv(dotenv_path=env_kms_path)
    elif os.path.exists(env_default_path):
        load_dotenv(dotenv_path=env_default_path)
    else:
        load_dotenv()  # fallback to default behavior
except ImportError:
    # python-dotenv not installed, continue without it
    pass

# Import KMS utilities for production
try:
    from .kms_utils import get_kms_decryptor
    KMS_AVAILABLE = True
except ImportError:
    KMS_AVAILABLE = False

os.environ['GDAL_LIBRARY_PATH'] = '/opt/homebrew/Cellar/gdal/3.11.0/lib/libgdal.dylib'

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR = Path(__file__).resolve().parent.parent

def get_secure_env_var(var_name, default=None):
    """
    Get environment variable with KMS decryption support
    
    Args:
        var_name (str): Environment variable name
        default: Default value if not found
        
    Returns:
        str: Decrypted value or default
    """
    if KMS_AVAILABLE:
        decryptor = get_kms_decryptor()
        return decryptor.get_decrypted_env_var(var_name, default)
    else:
        return os.getenv(var_name, default)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_secure_env_var('DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG_VALUE = get_secure_env_var('DEBUG', 'True')
DEBUG = DEBUG_VALUE.lower() == 'true' if DEBUG_VALUE else True

APPEND_SLASH = False

ALLOWED_HOSTS = (get_secure_env_var('ALLOWED_HOSTS') or '*').split(',')


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'json': {
            'format': '{asctime} {levelname} {name} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {asctime} {module}: {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',  # or 'json' if using log processing
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'users': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'driver-loc-cache',
    }
}


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.gis',
    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_gis',
    'corsheaders',
    'graphene_django',
    'users',
    'vehicles',
    'bookings',
    'wallet',
    'marketplace',
    'storages',
    'channels'
]

GRAPHENE = {
    "SCHEMA": "main.schema.schema",  # Path to your schema
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "corsheaders.middleware.CorsMiddleware",
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

ROOT_URLCONF = 'main.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'main.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'NAME': get_secure_env_var('DB_NAME', 'postgres'),
        'USER': get_secure_env_var('DB_USER', 'vikash'),
        'PASSWORD': get_secure_env_var('DB_PASSWORD'),
        'HOST': get_secure_env_var('DB_HOST', 'last-minute-dev.cm96escgy66l.us-east-1.rds.amazonaws.com'),
        'PORT': get_secure_env_var('DB_PORT', '5432'),
    }
}

# AUTH_USER_MODEL = 'users.User'


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

ASGI_APPLICATION = 'main.asgi.application'

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer",
    },
}

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CORS_ALLOW_ALL_ORIGINS = True

DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
AWS_MEDIA_BUCKET_NAME = get_secure_env_var('AWS_MEDIA_BUCKET_NAME', 'lastminute-media-root')
MEDIA_URL = f'https://{AWS_MEDIA_BUCKET_NAME}.s3.amazonaws.com/'

AWS_ACCESS_KEY_ID = get_secure_env_var('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = get_secure_env_var('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = get_secure_env_var('AWS_STORAGE_BUCKET_NAME', 'zappa-deployments-last-minute')
AWS_S3_REGION_NAME = get_secure_env_var('AWS_S3_REGION_NAME', 'us-east-1')
AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
AWS_SNS_ARN = get_secure_env_var('AWS_SNS_ARN', 'arn:aws:sns:us-east-1:054037119505:app/GCM/notify-driver')

STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'
STATIC_URL = '/static/'

STATIC_ROOT = BASE_DIR / 'staticfiles'  # Always set for non-S3 case
static_dir = os.path.join(BASE_DIR, 'static')
if os.path.exists(static_dir):
    STATICFILES_DIRS = [static_dir]